// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //   provider = "mongodb"
  provider = "postgresql" // for production we will use "postgresql",
  
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Merchant {
  id                String            @id @default(cuid())
  slug              String            @unique
  email             String
  name              String
  address           String?
  phoneNo           String // @db.VarChar(12) // Uncomment for production
  caption           String? // @db.VarChar(4)  // Uncomment for production
  shortDescription  String? // @db.VarChar(20)  //Uncomment for production
  services          MerchantService[]
  subscriptions     Subscription[]
  bookings          Booking[]
  discounts         Discount[]
  subscriptionPlans SubscriptionPlan[]
  reviews           Review[]
  allowOutsideWork  Boolean   @default(false)
  miscellanous      MerchantMiscellanous[] 
  apiKeys           MerchantApiKeys?
  notification      Notification[]
  calendlyLink      String?

  logo              String?
  logoId            String?

  facebook          String?
  twitter           String?
  instagram         String?
  linkedin          String?
  youtube           String?
  tiktok            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, slug])
}

model MerchantService {
  id          String  @id @default(cuid())
  faqs        FAQ[]
  imgUrl      String?
  imageId     String?
  description String?
  isDraft     Boolean @default(false)
  allowOutsideWork  Boolean @default(false)

  pricingMode String  @default("FIXED") //Could be "BRAND" OR "SUV_SEDAN"
  subscriptionPlans SubscriptionPlan[]

  keyPoints ServiceKeyPoint[]
  bookings   Booking[]
  subscriptions   Subscription[]

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?

  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  merchantId String?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  servicePricing ServicePricing[]
  discounts  Discount[]

  @@index([id, serviceId, merchantId])
}

model MerchantMiscellanous {
  id            String  @id @default(cuid())
  merchant      Merchant? @relation(fields: [merchantId], references: [id])
  merchantId    String?
  location      String
  cost          String

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model MerchantApiKeys {
  id            String  @id @default(cuid())
  merchant      Merchant @relation(fields: [merchantId], references: [id])
  merchantId    String  @unique
  paystack      String  @unique

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model ServicePricing {
  id                String           @id @default(cuid())
  merchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?          
  mode              String
  type              String?
  amount            Decimal
  bookings          Booking[]
  

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt @default(now())
}

// Discount
// Depends on - merchantService

enum DiscountType {
   percentage
   fixed 
}

model Discount {
  id                String           @id @default(cuid())
  code              String
  value             String
  type              DiscountType
  services          MerchantService[]

  merchant          Merchant? @relation(fields: [merchantId], references: [id])
  merchantId        String?
  
  plans             SubscriptionPlan[]

  expiresOn         DateTime?    

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt @default(now())

  @@unique([code, merchantId])
}

// SubscriptionPlan
// Depends on MerchantService
model SubscriptionPlan {
  id                String           @id @default(cuid())
  interval          String
  code              String
  autoBrand         String         @default("FIXED")
  merchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?

  merchant          Merchant? @relation(fields: [merchantId], references: [id])
  merchantId        String?
  subscription      Subscription[]  
  discount          Discount? @relation(fields: [discountId], references: [id])
  discountId        String?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}


// Services - independent of any merchant.
model Service {
  id          String  @id @default(cuid())
  type        String  @default("REPAIR") //ServiceType         @default(REPAIR)
  title       String  @unique
  description String?
  imgUrl      String?
  imageId     String?

  faqs             FAQ[]
  merchantServices MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id       String @id @default(cuid())
  question String
  answer   String

  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?

  merchantService   MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceKeyPoint {
  id                String           @id @default(cuid())
  point             String
  merchantService   MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                String @id @default(cuid())

  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String

  merchant           Merchant @relation(fields: [merchantId], references: [id])
  merchantId         String    

  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  planId            String
  
  user              User   @relation(fields: [userId], references: [id])
  userId            String

  fufillments        SubscriptionFulfillment[]

  status              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, merchantServiceId, planId])
}

model SubscriptionFulfillment {
  id                String @id @default(cuid())
  subscription      Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId    String

  nextCycleStarts   DateTime
  isPaid            Boolean     
  isFulfilled       Boolean     @default(false)
  paidOn            DateTime?
  fulfilledOn       DateTime?
  amountPaid        Decimal     @default(0)
  review            Review?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt          
}

model Booking {
  id String @id @default(cuid())

  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String

  merchant           Merchant @relation(fields: [merchantId], references: [id])
  merchantId         String 

  user              User   @relation(fields: [userId], references: [id])
  userId            String

  amount            Decimal
  items             ServicePricing[]
  isOutsideWork     Boolean
  location          String?
  info              String?
  paymentMode       String @default("online")
  review           Review?

  isPaid            Boolean @default(false)
  isFulfilled       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id                            String    @id @default(cuid())
  rating                        Int
  description                   String?
  booking                       Booking? @relation(fields: [bookingId], references: [id])
  bookingId                     String?  @unique
  subscriptionFulfillment       SubscriptionFulfillment? @relation(fields: [subscriptionFulfillmentId], references: [id])
  subscriptionFulfillmentId     String?  @unique

  merchant                      Merchant @relation(fields: [merchantId], references: [id])
  merchantId                    String 

  user                          User @relation(fields: [userId], references: [id])
  userId                        String
  
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
}

model Payment {
  id             String  @id @default(cuid())

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// User schema
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phoneNo   String?
  email     String   @unique
  imgUrl    String?
  booking   Booking[]
  subscription Subscription[]
  reviews       Review[]
  authorization         PaymentAuthorization[]
  notification  Notification[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt @default(now())
}

model PaymentAuthorization {
  id                    String   @id @default(cuid())
  userId                String   
  user                  User     @relation(fields: [userId], references: [id])
  authorization_code    String
  bin                   String?
  last4                 String?
  exp_month             String?
  exp_year              String?
  card_type             String?
  channel               String?
  bank                  String?
  reusable              Boolean
  brand                 String?
  signature             String

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt @default(now())

  @@unique([userId, signature])
}

model Notification {
  id                    String   @id @default(cuid())
  isRead                Boolean   @default(false)
  message               String
  subdomain             String
  
  receiver              User? @relation(fields: [receiverId], references: [id])
  receiverId            String? 

  merchant              Merchant? @relation(fields: [merchantId], references: [id])
  merchantId            String? 

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt @default(now())

  @@index([id])
}

// enum ServiceType {
//   REPAIR
//   SERVICING
// }


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //   provider = "mongodb"
  provider = "sqlite" // for production we will use "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Merchant {
  id               String            @id @default(cuid())
  slug             String
  email            String
  name             String
  address          String
  phoneNo          String // @db.VarChar(12) // Uncomment for production
  caption          String // @db.VarChar(4)  // Uncomment for production
  shortDescription String // @db.VarChar(20)  //Uncomment for production
  services         MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, slug])
}

model MerchantService {
  id          String  @id @default(cuid())
  faqs        FAQ[]
  imgUrl      String?
  imageId     String?
  description String?
  isDraft     Boolean @default(false)
  allowOutsideWork  Boolean @default(false)

  pricingMode String  @default("FIXED") //Could be "BRAND" OR "SUV_SEDAN"
  subscriptionPlans SubscriptionPlan[]

  keyPoints ServiceKeyPoint[]
  bookings   Booking[]
  subscriptions   Subscription[]

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?  @unique

  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  merchantId String?

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  servicePricing ServicePricing[]
  discounts  Discount[]

  @@index([id, serviceId, merchantId])
}

model ServicePricing {
  id                String           @id @default(cuid())
  merchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?          
  mode              String
  type              String?
  amount            Decimal
  

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt @default(now())
}

// Discount
// Depends on - merchantService

model Discount {
  id                String           @id @default(cuid())
  code              String
  value             String
  type              String
  merchantService   MerchantService[]   

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt @default(now())
}

// SubscriptionPlan
// Depends on MerchantService
model SubscriptionPlan {
  id                String           @id @default(cuid())
  interval              String
  code              String
  merchantService   MerchantService[] 
  subscription      Subscription[]  

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}


// Services - independent of any merchant.
model Service {
  id          String  @id @default(cuid())
  type        String  @default("REPAIR") //ServiceType         @default(REPAIR)
  title       String  @unique
  description String?
  imgUrl      String?
  imageId     String?

  faqs             FAQ[]
  merchantServices MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id       String @id @default(cuid())
  question String
  answer   String

  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?

  merchantService   MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ServiceKeyPoint {
  id                String           @id @default(cuid())
  point             String
  merchantService   MerchantService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                String @id @default(cuid())

  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String    

  type              SubscriptionPlan @relation(fields: [typeId], references: [id])
  typeId            String

  user              User   @relation(fields: [userId], references: [id])
  userId            String

  payment           Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, merchantServiceId])
}

model Booking {
  id String @id @default(cuid())

  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  payment Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id             String  @id @default(cuid())
  bookingId      String  @unique
  booking        Booking @relation(fields: [bookingId], references: [id])

  subscriptionId String  @unique
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// User schema
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  phoneNo   String?
  email     String   @unique
  imgUrl    String?
  booking   Booking?
  subscription Subscription[]
  user         PaymentAuthorization[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt @default(now())
}

model PaymentAuthorization {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
  authorization_code    String
  bin                   String?
  last4                 String?
  exp_month             String?
  exp_year              String?
  card_type             String?
  channel               String?
  bank                  String?
  reusable              Boolean
  brand                 String?
  signature             String

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt @default(now())

}

// enum ServiceType {
//   REPAIR
//   SERVICING
// }

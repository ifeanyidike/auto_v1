// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
//   provider = "mongodb"
  provider = "sqlite" // for production we will use "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Merchant {
  id        String            @id @default(cuid())
  slug      String
  name      String
  address   String
  services  MerchantService[]
  booking   Booking?

  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
}

model MerchantService {
  id        String              @id @default(cuid())
  faqs      FAQ[]
  keyPoints ServiceKeyPoint[]
  booking   Booking?

  Service   Service?            @relation(fields: [serviceId], references: [id])
  serviceId String?             

  Merchant   Merchant?          @relation(fields: [merchantId], references: [id])
  merchantId String?            

  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

// Services - independent of any merchant.
model Service {
  id                String              @id @default(cuid())
  type              String              @default("REPAIR")//ServiceType         @default(REPAIR)
  title             String
  description       String

  faqs              FAQ[]
  merchantServices  MerchantService[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model FAQ {
  id                String           @id @default(cuid())
  question          String
  answer            String

  Service           Service?         @relation(fields: [serviceId], references: [id])
  serviceId         String?          

  MerchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?          

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ServiceKeyPoint {
  id                String           @id @default(cuid())
  point             String
  MerchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?          

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Booking {
  id                String          @id @default(cuid())

  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String          @unique 

  merchant          Merchant        @relation(fields: [merchantId], references: [id])
  merchantId        String          @unique 

  payment           Payment?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Payment {
    id         String    @id @default(cuid())
    bookingId  String    @unique 
    booking    Booking   @relation(fields: [bookingId], references: [id])

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

// enum ServiceType {
//   REPAIR
//   SERVICING
// }

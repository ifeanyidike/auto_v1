// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
//   provider = "mongodb"
  provider = "sqlite" // for production we will use "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}


model Merchant {
  id                String            @id @default(cuid())
  slug              String
  email             String            
  name              String
  address           String
  phoneNo           String            // @db.VarChar(12) // Uncomment for production
  caption           String            // @db.VarChar(4)  // Uncomment for production
  shortDescription  String            // @db.VarChar(20)  //Uncomment for production
  services          MerchantService[]

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([id, slug])
}

model MerchantService {
  id        String              @id @default(cuid())
  faqs      FAQ[]
  imgUrl    String
  keyPoints ServiceKeyPoint[]
  booking   Booking?

  service   Service?            @relation(fields: [serviceId], references: [id])
  serviceId String?             

  merchant   Merchant?          @relation(fields: [merchantId], references: [id])
  merchantId String?            

  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@index([id, serviceId, merchantId])
}

// Services - independent of any merchant.
model Service {
  id                String              @id @default(cuid())
  type              String              @default("REPAIR")    //ServiceType         @default(REPAIR)
  title             String              @unique
  description       String
  imgUrl            String

  faqs              FAQ[]
  merchantServices  MerchantService[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model FAQ {
  id                String           @id @default(cuid())
  question          String
  answer            String

  Service           Service?         @relation(fields: [serviceId], references: [id])
  serviceId         String?          

  merchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?          

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model ServiceKeyPoint {
  id                String           @id @default(cuid())
  point             String
  merchantService   MerchantService? @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String?          

  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Booking {
  id                String          @id @default(cuid())

  merchantService   MerchantService @relation(fields: [merchantServiceId], references: [id])
  merchantServiceId String          @unique 

  user              User            @relation(fields: [userId], references: [id])
  userId            String          @unique 

  payment           Payment?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Payment {
    id         String    @id @default(cuid())
    bookingId  String    @unique 
    booking    Booking   @relation(fields: [bookingId], references: [id])

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}




// User schema

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    booking       Booking?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


// enum ServiceType {
//   REPAIR
//   SERVICING
// }

